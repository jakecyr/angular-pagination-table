!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/core"),require("@angular/common")):"function"==typeof define&&define.amd?define("@jakecyr/pagination-table",["exports","@angular/core","@angular/common"],t):t(((e=e||self).jakecyr=e.jakecyr||{},e.jakecyr["pagination-table"]={}),e.ng.core,e.ng.common)}(this,(function(e,t,n){"use strict";var a=function(){function e(){}return e.prototype.getRowSet=function(e,t,n){var a=[],r=t*n;return e&&e.length>0&&(a=e.slice(r,r+n)),a},e.prototype.getMaxPages=function(e,t){var n=0;return e&&e.length>0&&(n=Math.ceil(e.length/t)),n},e.decorators=[{type:t.Injectable,args:[{providedIn:"root"}]}],e.ngInjectableDef=t.ɵɵdefineInjectable({factory:function(){return new e},token:e,providedIn:"root"}),e}(),r=function(){function e(e){this.paginationTableService=e,this.clickRow=new t.EventEmitter,this.currentData=[],this.defaultPerPage=10}return e.prototype.ngOnChanges=function(){this.currentPage=0,this.refreshTable()},e.prototype.incrementPage=function(){this.currentPage++,this.refreshTable()},e.prototype.decrementPage=function(){this.currentPage--,this.refreshTable()},e.prototype.refreshTable=function(){var e=this.perPage||this.defaultPerPage;this.currentData=this.paginationTableService.getRowSet(this.data,this.currentPage,e),this.maxPages=this.paginationTableService.getMaxPages(this.data,e)},e.decorators=[{type:t.Component,args:[{selector:"lib-pagination-table",template:'<div *ngIf="data && headers">\n    <table [class]="tableClasses">\n        <thead>\n            <tr>\n                <th *ngFor="let header of headers">{{ header.title || header.key }}</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr *ngFor="let row of currentData">\n                <td *ngFor="let header of headers">{{ row[header.key] }}</td>\n            </tr>\n        </tbody>\n    </table>\n\n    <div class="">\n        <button [class]="buttonClasses" [disabled]="currentPage == 0 || maxPages == 0" (click)="decrementPage()">Previous</button>\n        <button [class]="buttonClasses" [disabled]="currentPage == (maxPages - 1) || maxPages == 0" (click)="incrementPage()">Next</button>\n    </div>\n</div>\n'}]}],e.ctorParameters=function(){return[{type:a}]},e.propDecorators={data:[{type:t.Input}],headers:[{type:t.Input}],tableClasses:[{type:t.Input}],buttonClasses:[{type:t.Input}],perPage:[{type:t.Input}],clickRow:[{type:t.Output}]},e}();var o=function(){function e(){}return e.decorators=[{type:t.NgModule,args:[{declarations:[r],imports:[n.CommonModule],exports:[r]}]}],e}();e.PaginationTableComponent=r,e.PaginationTableModule=o,e.PaginationTableService=a,Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=jakecyr-pagination-table.umd.min.js.map